<?php

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Cradle_System_Storm_Event_Storm_Test extends TestCase
{
  protected $cradle;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->cradle = cradle();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   */
  public function testStormCreate()
  {
    $payload = $this->makePayload();
    $payload['request']->setStage([
      'drop' => true,
      'table' => 'foo',
      'primary' => 'foo_id',
      'columns' => [
        'foo_title' => [
          'type' => 'varchar',
          'length' => 255,
          'required' => true,
          'index' => true
        ],
        'foo_slug' => [
          'type' => 'varchar',
          'length' => 255,
          'required' => true,
          'unique' => true
        ],
        'foo_detail' => [
          'type' => 'text',
          'null' => true
        ],
        'foo_amount' => [
          'type' => 'int',
          'length' => 5,
          'attribute' => 'unsigned',
          'default' => 0,
          'index' => true
        ]
      ]
    ]);

    $this->cradle->method(
      'storm-create',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());

    $table = $payload['request']->meta('storm')->getTables('foo');
    $this->assertTrue(!empty($table));
  }

  /**
   */
  public function testStormAlter()
  {
    $payload = $this->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'columns' => [
        'foo_title' => [
          'type' => 'varchar',
          'length' => 254,
          'required' => true,
          'index' => true
        ],
        'foo_detail' => [
          'type' => 'text'
        ],
        'foo_amount' => [
          'type' => 'int',
          'length' => 6,
          'default' => 0,
          'index' => true
        ]
      ]
    ]);

    $this->cradle->method(
      'storm-alter',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
  }

  /**
   */
  public function testStormInsert()
  {
    $payload = $this->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'data' => [
        'foo_title' => ['value' => 'Foo Bar', 'bind' => true],
        'foo_detail' => 'This is foo bar',
        'foo_amount' => ['value' => 10, 'bind' => false],
        'dont_error' => 'ok'
      ]
    ]);

    $actual = $this->cradle->method(
      'storm-insert',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
    $this->assertEquals(1, $actual);
  }

  /**
   */
  public function testStormUpdate()
  {
    $payload = $this->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'data' => [
        'foo_title' => ['value' => 'Foo Bar 2', 'bind' => true],
        'foo_detail' => 'This is foo bar 2',
        'foo_amount' => ['value' => 11, 'bind' => false],
        'dont_error' => 'ok',
      ],
      'filter' => [
        [
          'where' => 'foo_id = %s',
          'binds' => [1]
        ]
      ]
    ]);

    $actual = $this->cradle->method(
      'storm-update',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
  }

  /**
   */
  public function testStormSearch()
  {
    $payload = $this->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'filter' => [
        [
          'where' => 'foo_id = %s',
          'binds' => [1]
        ]
      ]
    ]);

    $actual = $this->cradle->method(
      'storm-search',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
    $this->assertEquals(1, $actual[0]['foo_id']);
    $this->assertEquals('Foo Bar 2', $actual[0]['foo_title']);
    $this->assertEquals('This is foo bar 2', $actual[0]['foo_detail']);
    $this->assertEquals(11, $actual[0]['foo_amount']);

    $payload = $this->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'columns' => ['foo_id', 'foo_title'],
      'filter' => [
        [
          'where' => 'foo_id = %s',
          'binds' => [1]
        ]
      ],
      'with_total' => 1
    ]);

    $actual = $this->cradle->method(
      'storm-search',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
    $this->assertTrue(!isset($actual['rows'][0]['foo_detail']));
    $this->assertTrue(!isset($actual['rows'][0]['foo_amount']));

    $this->assertEquals(1, $actual['rows'][0]['foo_id']);
    $this->assertEquals('Foo Bar 2', $actual['rows'][0]['foo_title']);
    $this->assertEquals(1, $actual['total']);
  }

  /**
   */
  public function testStormDelete()
  {
    $payload = $this->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'filter' => [
        [
          'where' => 'foo_id = %s',
          'binds' => [1]
        ]
      ]
    ]);

    $this->cradle->method(
      'storm-delete',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
  }

  protected function makePayload()
  {
    $payload = $this->cradle->makePayload();
    $payload['request']->meta('mysql', include(__DIR__.'/assets/mysql.php'));
    return $payload;
  }
}
