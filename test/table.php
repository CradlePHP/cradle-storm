<?php

use PHPUnit\Framework\TestCase;

use Cradle\Package\PackageHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Cradle_System_Storm_Event_Table_Test extends TestCase
{
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    //this is the OOP version of cradle
    $this->object = new PackageHandler;
    //create a PDO package like the README describes
    $this->object
      ->register('pdo')
      ->package('pdo')
      ->mapPackageMethods(include __DIR__.'/assets/mysql.php');
    //now register storm
    $this->object->register('cradlephp/storm', dirname(__DIR__) . '/.cradle.php');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   */
  public function testStormInsert()
  {
    $cradle = $this->object;
    $payload = $cradle('io')->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'data' => [
        'foo_title' => ['value' => 'Foo Bar', 'bind' => true],
        'foo_detail' => 'This is foo bar',
        'foo_amount' => ['value' => 10, 'bind' => false],
        'dont_error' => 'ok'
      ]
    ]);

    $actual = $cradle('event')->method(
      'storm-insert',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
    $this->assertEquals(1, $actual);
  }

  /**
   */
  public function testStormUpdate()
  {
    $cradle = $this->object;
    $payload = $cradle('io')->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'data' => [
        'foo_title' => ['value' => 'Foo Bar 2', 'bind' => true],
        'foo_detail' => 'This is foo bar 2',
        'foo_amount' => ['value' => 11, 'bind' => false],
        'dont_error' => 'ok',
      ],
      'filter' => [
        [
          'where' => 'foo_id = %s',
          'binds' => [1]
        ]
      ]
    ]);

    $actual = $cradle('event')->method(
      'storm-update',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
  }

  /**
   */
  public function testStormSearch()
  {
    $cradle = $this->object;
    $payload = $cradle('io')->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'filter' => [
        [
          'where' => 'foo_id = %s',
          'binds' => [1]
        ]
      ]
    ]);

    $actual = $cradle('event')->method(
      'storm-search',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
    $this->assertEquals(1, $actual[0]['foo_id']);
    $this->assertEquals('Foo Bar 2', $actual[0]['foo_title']);
    $this->assertEquals('This is foo bar 2', $actual[0]['foo_detail']);
    $this->assertEquals(11, $actual[0]['foo_amount']);

    $payload = $cradle('io')->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'columns' => ['foo_id', 'foo_title'],
      'filter' => [
        [
          'where' => 'foo_id = %s',
          'binds' => [1]
        ]
      ],
      'with_total' => 1
    ]);

    $actual = $cradle('event')->method(
      'storm-search',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
    $this->assertTrue(!isset($actual['rows'][0]['foo_detail']));
    $this->assertTrue(!isset($actual['rows'][0]['foo_amount']));

    $this->assertEquals(1, $actual['rows'][0]['foo_id']);
    $this->assertEquals('Foo Bar 2', $actual['rows'][0]['foo_title']);
    $this->assertEquals(1, $actual['total']);
  }

  /**
   */
  public function testStormDelete()
  {
    $cradle = $this->object;
    $payload = $cradle('io')->makePayload();
    $payload['request']->setStage([
      'table' => 'foo',
      'filter' => [
        [
          'where' => 'foo_id = %s',
          'binds' => [1]
        ]
      ]
    ]);

    $cradle('event')->method(
      'storm-delete',
      $payload['request'],
      $payload['response']
    );

    $this->assertTrue(!$payload['response']->isError());
  }
}
